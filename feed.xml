<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://bg6lh.github.io/">
    <title>BG6LH&#39;s Digital Garden</title>
    <link href="https://bg6lh.github.io//feed.xml" rel="self" />
    <link href="https://bg6lh.github.io/" />
    <updated>2025-03-08T19:20:03Z</updated>
    <id>https://bg6lh.github.io/</id>
        <entry>
            <title>
                Welcome to BG6LH&#39;s Digital Garden
                
            </title>
            <updated>2025-03-08T19:19:53Z</updated>
            <id>https://bg6lh.github.io//</id>
            <content type="html">
                &lt;p&gt;&lt;img src=&quot;https://bg6lh.github.io/img/user/assets/Welcome%20to%20BG6LH&#39;s%20Digital%20Garden/img-Welcome%20to%20BG6LH&#39;s%20Digital%20Garden.jpg&quot; alt=&quot;img-Welcome to BG6LH&#39;s Digital Garden.jpg|800&quot; width=&quot;800px&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;bg-6-lh-digtal-garden&quot; tabindex=&quot;-1&quot;&gt;欢迎来到 BG6LH 的 Digtal Garden&lt;/h1&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;这是一个新的开始，我正在使用Obsidian建立我的个人知识库，并且用上了AI，管理、建设我的本地化知识体系，包括我的工作、及爱好&lt;/li&gt;
&lt;li&gt;这些年，我玩业余无线电的心得，大多数都发布在我的微信公众号上&lt;/li&gt;
&lt;li&gt;但是微信公众号是一个封闭的体系，对搜索额引擎和AI世界很不友好&lt;/li&gt;
&lt;li&gt;我会逐渐把一些文章搬回到我的这个小花园里&lt;/li&gt;
&lt;li&gt;顺便把一些当时留下的错误信息纠正过来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2025-03-08 BG6LH&lt;/p&gt;

            </content>
            <link href="https://bg6lh.github.io//" />
        </entry>
        <entry>
            <title>
                Depoly Obsidian Digital Garden on Github Pages
                
            </title>
            <updated>2025-03-08T19:19:53Z</updated>
            <id>https://bg6lh.github.io//Docs/Depoly-Obsidian-Digital-Garden-on-Github-Pages/</id>
            <content type="html">
                &lt;blockquote&gt;
&lt;p&gt;[!NOTE]&lt;br /&gt;
&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#ODG&quot;&gt;#ODG&lt;/a&gt; : Obsidian Digital Garden, in short.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;depoly-obsidian-digital-garden-on-github-pages&quot; tabindex=&quot;-1&quot;&gt;Depoly Obsidian Digital Garden on Github Pages&lt;/h1&gt;
&lt;p&gt;在ChatGPT协助下，成功在Github Pages上直接部署了Obsidian Digital Garden插件的网站。&lt;/p&gt;
&lt;p&gt;该页面提供了一个基于 GitHub Actions 的部署策略示例，用于将 Obsidian 文档自动构建并发布到 GitHub Pages 的 gh-pages 分支上，无需依赖 Vercel 或 Netlify。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动触发构建：当 &lt;code&gt;src/site/**&lt;/code&gt; 目录下有新增或修改文件时。&lt;/li&gt;
&lt;li&gt;部署目标：gh-pages 分支&lt;/li&gt;
&lt;li&gt;使用 Node.js 16 运行构建命令&lt;/li&gt;
&lt;li&gt;部署工具：&lt;code&gt;peaceiris/actions-gh-pages&lt;/code&gt;、&lt;code&gt;node.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;尽管ODG是基于 &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#11ty&quot;&gt;#11ty&lt;/a&gt; 构建的，但是不要从11ty安装，要用 node.js包安装。这样才能保证部署了全部的插件。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;下面给出一个基于 GitHub Actions 的最新部署策略示例，满足如下要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成器代码保留在 main 分支；&lt;/li&gt;
&lt;li&gt;当 src 目录下有新增或修改文件时，自动触发构建并将生成的静态文件发布到 gh-pages 分支；&lt;/li&gt;
&lt;li&gt;完全基于 GitHub Pages 部署，不依赖 Vercel 或 Netlify。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;部署摘要&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般情况下，不必自己创建gh-pages分支，代码中有Action的workflow脚本，部署之后可成功执行。&lt;/li&gt;
&lt;li&gt;如果在本地的Obsidian里移动了笔记文件的位置，在发布后，老的md文件很可能仍然会存在github上/src/site/notes里原有的位置。当定义了“永久链接”会引发11ty的重名文件冲突，导致Action的deploy动作失败。通常情况下一定之后要去github上找到老的删掉。&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-hub-actions-workflow&quot; tabindex=&quot;-1&quot;&gt;示例 GitHub Actions Workflow&lt;/h2&gt;
&lt;p&gt;在仓库 main 分支下创建目录 &lt;code&gt;.github/workflows&lt;/code&gt;，并新建文件（例如 &lt;code&gt;deploy.yml&lt;/code&gt;），文件内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;name: Deploy ODG Site to GitHub Pages

permissions:
  contents: write

on:
  push:
    branches:
      - main
    paths:
      - &#39;src/site/**&#39;

jobs:
  deploy:
    runs-on: ubuntu-22.04

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. 设置 Node.js 环境（可根据需要调整版本）
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: &#39;22&#39;

      # 3. 安装依赖
      - name: Install dependencies
        run: npm install

      # 4. 构建静态站点（不要用11ty部署，要用npm部署整个包，因为ODG有自定义的打包插件）
      - name: Build ODG Site with npm
        run: npm run build --if-present

      # 5. 部署生成的 dist 目录到 gh-pages 分支
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: gh-pages

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;说明&quot; tabindex=&quot;-1&quot;&gt;说明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;触发条件&lt;/strong&gt;&lt;br /&gt;
上述工作流配置在 &lt;code&gt;main&lt;/code&gt; 分支中监控 &lt;code&gt;src&lt;/code&gt; 目录的所有变化（&lt;code&gt;src/**&lt;/code&gt;）。每当有文件添加或修改时，工作流将自动触发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;构建步骤&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;actions/checkout&lt;/code&gt; 检出最新代码。&lt;/li&gt;
&lt;li&gt;设置 Node.js 环境（此处选择了 Node.js 16，可根据实际需求调整）。&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;npm install&lt;/code&gt; 安装依赖，并运行 &lt;code&gt;npm run build&lt;/code&gt; 生成静态文件，假设生成目录为 &lt;code&gt;dist&lt;/code&gt;。如果你的项目生成目录不是 &lt;code&gt;dist&lt;/code&gt;，请相应调整 &lt;code&gt;publish_dir&lt;/code&gt; 的路径。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;部署步骤&lt;/strong&gt;&lt;br /&gt;
使用 &lt;a href=&quot;https://github.com/peaceiris/actions-gh-pages&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;peaceiris/actions-gh-pages&lt;/a&gt; 部署生成的文件到 &lt;code&gt;gh-pages&lt;/code&gt; 分支。部署时利用内置的 &lt;code&gt;${{ secrets.GITHUB_TOKEN }}&lt;/code&gt; 自动进行认证，无需额外设置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;仓库配置&lt;/strong&gt;&lt;br /&gt;
部署成功后，请确保在 GitHub 仓库设置中，GitHub Pages 的来源选择为 &lt;code&gt;gh-pages&lt;/code&gt; 分支，以便正确显示你的 Obsidian Digital Garden。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过以上配置，Obsidian 文档将从 main 分支的 src 目录自动构建，并利用最新的 GitHub Actions 部署策略发布到 GitHub Pages 的 gh-pages 分支上。这样就实现了一个纯 GitHub Pages 的自动部署流程，无需依赖第三方平台。&lt;/p&gt;
&lt;h2 id=&quot;404&quot; tabindex=&quot;-1&quot;&gt;404问题解决&lt;/h2&gt;
&lt;p&gt;出现 404 页面可能有以下几个原因，你可以逐项排查和解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GitHub Pages 源设置&lt;/strong&gt;&lt;br /&gt;
请确认仓库的 GitHub Pages 配置中，Source 选项已正确设置为 gh-pages 分支的根目录。如果曾经部署过其他目录（例如 /src/site），可能会导致配置残留。你可以进入仓库设置 → Pages，检查并确保“发布来源”设置为 gh-pages 分支的根目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分支内容是否正确&lt;/strong&gt;&lt;br /&gt;
根据最新配置，Eleventy 构建生成的静态文件位于 dist 目录，并通过 Action 部署到 gh-pages 分支。请确认 gh-pages 分支根目录下是否存在正确的 index.html 文件以及其他必要的资源。你可以直接在 GitHub 仓库的 gh-pages 分支中查看构建输出文件。如果旧的部署曾将整个 main 分支内容推送过来，可能需要清理 gh-pages 分支后再重新部署。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建议先备份当前内容，然后删除 gh-pages 分支，再通过 GitHub UI 或命令行创建一个空的 gh-pages 分支，再重新触发 Action 部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;浏览器缓存问题&lt;/strong&gt;&lt;br /&gt;
有时浏览器缓存可能导致显示 404 页面，建议尝试强制刷新页面（例如使用 Ctrl+F5 或清除缓存）来查看最新状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自定义域名及 DNS 配置&lt;/strong&gt;&lt;br /&gt;
如果你设置了自定义域名，也请确认 DNS 记录正确，并且 GitHub Pages 的 CNAME 文件（如果使用）已正确配置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查 GitHub Pages 设置，确保使用 gh-pages 分支根目录。&lt;/li&gt;
&lt;li&gt;确认 gh-pages 分支内容为 Eleventy 生成的 dist 文件内容（包含 index.html）。&lt;/li&gt;
&lt;li&gt;清理可能的旧缓存，必要时重新创建 gh-pages 分支再触发部署。&lt;/li&gt;
&lt;li&gt;如果使用自定义域名，请检查 DNS 配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按照这些步骤排查后，再观察前端页面是否能正确加载。&lt;/p&gt;

            </content>
            <link href="https://bg6lh.github.io//Docs/Depoly-Obsidian-Digital-Garden-on-Github-Pages/" />
        </entry>
</feed>
