<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://bg6lh.github.io/">
    <title>BG6LH&#39;s Digital Garden</title>
    <link href="https://bg6lh.github.io//feed.xml" rel="self" />
    <link href="https://bg6lh.github.io/" />
    <updated>2025-03-10T05:42:55Z</updated>
    <id>https://bg6lh.github.io/</id>
        <entry>
            <title>
                Welcome to BG6LH&#39;s Digital Garden
                
            </title>
            <updated>2025-03-10T05:42:43Z</updated>
            <id>https://bg6lh.github.io//</id>
            <content type="html">
                &lt;p&gt;&lt;img src=&quot;https://bg6lh.github.io/img/user/assets/Welcome%20to%20BG6LH&#39;s%20Digital%20Garden/img-Welcome%20to%20BG6LH&#39;s%20Digital%20Garden.jpg&quot; alt=&quot;img-Welcome to BG6LH&#39;s Digital Garden.jpg|800&quot; width=&quot;800px&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;bg-6-lh-digtal-garden&quot; tabindex=&quot;-1&quot;&gt;欢迎来到 BG6LH 的 Digtal Garden&lt;/h1&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;这是一个新的开始，我正在使用Obsidian建立我的个人知识库，并且用上了AI，管理、建设我的本地化知识体系，包括我的工作、及爱好&lt;/li&gt;
&lt;li&gt;这些年，我玩业余无线电的心得，大多数都发布在我的微信公众号上&lt;/li&gt;
&lt;li&gt;但是微信公众号是一个封闭的体系，对搜索额引擎和AI世界很不友好&lt;/li&gt;
&lt;li&gt;我会逐渐把一些文章搬回到我的这个小花园里&lt;/li&gt;
&lt;li&gt;顺便把一些当时留下的错误信息纠正过来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2025-03-08 BG6LH&lt;/p&gt;

            </content>
            <link href="https://bg6lh.github.io//" />
        </entry>
        <entry>
            <title>
                Depoly Obsidian Digital Garden on Github Pages
                
            </title>
            <updated>2025-03-10T05:42:43Z</updated>
            <id>https://bg6lh.github.io//Docs/Depoly-Obsidian-Digital-Garden-on-Github-Pages/</id>
            <content type="html">
                &lt;blockquote&gt;
&lt;p&gt;[!NOTE]&lt;br /&gt;
&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#ODG&quot;&gt;#ODG&lt;/a&gt; : Obsidian Digital Garden, in short.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot; tabindex=&quot;-1&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在ChatGPT协助下，我成功在Github Pages上直接部署了Obsidian Digital Garden插件的网站。&lt;/p&gt;
&lt;p&gt;该页面提供了一个基于 GitHub Actions 的部署策略示例，用于将 Obsidian 文档自动构建并发布到 GitHub Pages 的 gh-pages 分支上，无需依赖 Vercel 或 Netlify。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动触发构建：当 &lt;code&gt;src/site/**&lt;/code&gt; 目录下有新增或修改文件时。&lt;/li&gt;
&lt;li&gt;部署目标：gh-pages 分支&lt;/li&gt;
&lt;li&gt;使用 Node.js 16 运行构建命令&lt;/li&gt;
&lt;li&gt;部署工具：&lt;code&gt;peaceiris/actions-gh-pages&lt;/code&gt;、&lt;code&gt;node.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;尽管ODG是基于 &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#11ty&quot;&gt;#11ty&lt;/a&gt; 构建的，但是不要从11ty安装，要用 node.js包安装。这样才能保证部署了全部的插件。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;下面给出一个基于 GitHub Actions 的最新部署策略示例，满足如下要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成器代码保留在 main 分支；&lt;/li&gt;
&lt;li&gt;当 src 目录下有新增或修改文件时，自动触发构建并将生成的静态文件发布到 gh-pages 分支；&lt;/li&gt;
&lt;li&gt;完全基于 GitHub Pages 部署，不依赖 Vercel 或 Netlify。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;部署避坑&quot; tabindex=&quot;-1&quot;&gt;部署避坑&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一般情况下，不必自己创建gh-pages分支，代码中有Action的workflow脚本，部署之后可成功自行创建gh-pages分支。&lt;/li&gt;
&lt;li&gt;如果在本地的Obsidian里移动了笔记文件的位置，在发布后，老的md文件很可能仍然会存在main分支的 &lt;code&gt;/src/site/notes&lt;/code&gt;里原有的位置。当定义了“永久链接”时，会引发11ty的重名文件冲突，导致Action的deploy动作失败。通常情况下一定之后要去github上找到老的删掉。&lt;/li&gt;
&lt;li&gt;相关话题：为了保证URL可读性，使用中文名字做笔记名时，可以添加&lt;code&gt;dg-path&lt;/code&gt;或者&lt;code&gt;dg-permalink&lt;/code&gt;，定一个英文名，让页面渲染时产生一个英文的URL。&lt;/li&gt;
&lt;li&gt;在Obsidian里修改ODG插件的设置，要在下一次发布时触发了Action重新Deploy时才会生效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-hub-actions-workflow&quot; tabindex=&quot;-1&quot;&gt;示例 GitHub Actions Workflow&lt;/h2&gt;
&lt;p&gt;在仓库 main 分支下创建目录 &lt;code&gt;.github/workflows&lt;/code&gt;，并新建文件（例如 &lt;code&gt;deploy.yml&lt;/code&gt;），文件内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;name: Deploy ODG Site to GitHub Pages

permissions:
  contents: write

on:
  push:
    branches:
      - main
    paths:
      - &#39;src/site/**&#39;

jobs:
  deploy:
    runs-on: ubuntu-22.04

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. 设置 Node.js 环境（可根据需要调整版本）
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: &#39;22&#39;

      # 3. 安装依赖
      - name: Install dependencies
        run: npm install

      # 4. 构建静态站点（不要用11ty部署，要用npm部署整个包，因为ODG有自定义的打包插件）
      - name: Build ODG Site with npm
        run: npm run build --if-present

      # 5. 部署生成的 dist 目录到 gh-pages 分支
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: gh-pages

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;说明&quot; tabindex=&quot;-1&quot;&gt;说明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;触发条件&lt;/strong&gt;&lt;br /&gt;
上述工作流配置在 &lt;code&gt;main&lt;/code&gt; 分支中监控 &lt;code&gt;src&lt;/code&gt; 目录的所有变化（&lt;code&gt;src/**&lt;/code&gt;）。每当有文件添加或修改时，工作流将自动触发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;构建步骤&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;actions/checkout&lt;/code&gt; 检出最新代码。&lt;/li&gt;
&lt;li&gt;设置 Node.js 环境（此处选择了 Node.js 16，可根据实际需求调整）。&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;npm install&lt;/code&gt; 安装依赖，并运行 &lt;code&gt;npm run build&lt;/code&gt; 生成静态文件，假设生成目录为 &lt;code&gt;dist&lt;/code&gt;。如果你的项目生成目录不是 &lt;code&gt;dist&lt;/code&gt;，请相应调整 &lt;code&gt;publish_dir&lt;/code&gt; 的路径。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;部署步骤&lt;/strong&gt;&lt;br /&gt;
使用 &lt;a href=&quot;https://github.com/peaceiris/actions-gh-pages&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;peaceiris/actions-gh-pages&lt;/a&gt; 部署生成的文件到 &lt;code&gt;gh-pages&lt;/code&gt; 分支。部署时利用内置的 &lt;code&gt;${{ secrets.GITHUB_TOKEN }}&lt;/code&gt; 自动进行认证，无需额外设置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;仓库配置&lt;/strong&gt;&lt;br /&gt;
部署成功后，请确保在 GitHub 仓库设置中，GitHub Pages 的来源选择为 &lt;code&gt;gh-pages&lt;/code&gt; 分支，以便正确显示你的 Obsidian Digital Garden。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过以上配置，Obsidian 文档将从 main 分支的 src 目录自动构建，并利用最新的 GitHub Actions 部署策略发布到 GitHub Pages 的 gh-pages 分支上。这样就实现了一个纯 GitHub Pages 的自动部署流程，无需依赖第三方平台。&lt;/p&gt;
&lt;h2 id=&quot;404&quot; tabindex=&quot;-1&quot;&gt;404问题解决&lt;/h2&gt;
&lt;p&gt;如果部署之后出现 404 页面可能有以下几个原因，你可以逐项排查和解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GitHub Pages 源设置&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请确认仓库的 GitHub Pages 配置中，Source 选项已正确设置为 gh-pages 分支的根目录。如果曾经部署过其他目录（例如 /src/site），可能会导致配置残留。你可以进入仓库设置 → Pages，检查并确保“发布来源”设置为 gh-pages 分支的根目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分支内容是否正确&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据最新配置，Eleventy 构建生成的静态文件位于 dist 目录，并通过 Action 部署到 gh-pages 分支。请确认 gh-pages 分支根目录下是否存在正确的 index.html 文件以及其他必要的资源。你可以直接在 GitHub 仓库的 gh-pages 分支中查看构建输出文件。如果旧的部署曾将整个 main 分支内容推送过来，可能需要清理 gh-pages 分支后再重新部署。&lt;/li&gt;
&lt;li&gt;建议先备份当前内容，然后删除 gh-pages 分支，再通过 GitHub UI 或命令行创建一个空的 gh-pages 分支，再重新触发 Action 部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;浏览器缓存问题&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有时浏览器缓存可能导致显示 404 页面，建议尝试强制刷新页面（例如使用 Ctrl+F5 或清除缓存）来查看最新状态。&lt;/li&gt;
&lt;li&gt;强烈推荐用浏览器的“无痕模式”调试前端页面。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自定义域名及 DNS 配置&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你设置了自定义域名，也请确认 DNS 记录正确，并且 GitHub Pages 的 CNAME 文件（如果使用）已正确配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查 GitHub Pages 设置，确保使用 gh-pages 分支根目录。&lt;/li&gt;
&lt;li&gt;确认 gh-pages 分支内容为 Eleventy 生成的 dist 文件内容（包含 index.html）。&lt;/li&gt;
&lt;li&gt;清理可能的旧缓存，必要时重新创建 gh-pages 分支再触发部署。&lt;/li&gt;
&lt;li&gt;如果使用自定义域名，请检查 DNS 配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按照这些步骤排查后，再观察前端页面是否能正确加载。&lt;/p&gt;

            </content>
            <link href="https://bg6lh.github.io//Docs/Depoly-Obsidian-Digital-Garden-on-Github-Pages/" />
        </entry>
        <entry>
            <title>
                DIY FT-817 数据电缆
                
            </title>
            <updated>2025-03-10T05:42:43Z</updated>
            <id>https://bg6lh.github.io//DIY-FT-817-DATA-Cable/</id>
            <content type="html">
                &lt;h1 id=&quot;diy-ft-817&quot; tabindex=&quot;-1&quot;&gt;DIY FT-817 数据电缆&lt;/h1&gt;
&lt;p&gt;为了在FT-817上更方便地玩FT8，我做了一根DATA电脑连接线。配合以前买的一根写频线控制FT-817的PTT，整个系统工作的很顺溜。连接线的制作方法很简单，主要材料是一根标准MD6的线，两个立体声插头，一个USB声卡，直接连到一起就搞定。&lt;/p&gt;
&lt;h2 id=&quot;ft-817-data&quot; tabindex=&quot;-1&quot;&gt;关于FT-817的DATA接口&lt;/h2&gt;
&lt;p&gt;这个DATA接口，它的名字叫“数据”，其实是通过&lt;strong&gt;音频电平&lt;/strong&gt;、也就是音量，来跟其它设备进行信号传递的一种接口。这是一个彻头彻脑的“音频”设备。&lt;/p&gt;
&lt;p&gt;FT8用AFSK模式调制信号。AFSK是&lt;strong&gt;音频&lt;/strong&gt;的频移键控。电台收发的是一种音频调制信号。这个声音通过电缆传送到电脑声卡里，再用的wsjt-x这类软件解调、播放声音，这个体系就是这样工作起来的。&lt;/p&gt;
&lt;p&gt;我要做的这根线，就是电台到电脑的这段连接电缆。&lt;/p&gt;
&lt;h2 id=&quot;材料清单&quot; tabindex=&quot;-1&quot;&gt;材料清单&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;一根Mini-Din 6（MD6）的标准连接线&lt;/strong&gt; 这跟键盘鼠标用的PS/2线接口完全一样。但是PS/2键盘鼠标线大多数省略了2、6两根连线，对于DATA输入输出来说缺了接地线。所以一定要买一根标准的MD6连接线。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一个USB声卡(带3.5mm的音频输入输出）&lt;/strong&gt; 这是为了把FT8的音频信号，跟系统其它软件的音效彻底隔离开。况且我这个2015年的MBP也没有音频输入接口了，只能靠电脑的内置麦克风“听”旁边电台的声音。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;两个3.5mm立体声插头&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一根FT-817的ACC控制线&lt;/strong&gt; 如果你想让电脑来自主控制电台的信号收发，就需要这根线。这是一根USB转TTL的编程线、写频线，最早买来是为了给817写频用的，PL-2302芯片的。&lt;/li&gt;
&lt;li&gt;最后在准备一些磁环，套在做好的线两端，用来抑制杂散信号的干扰。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;ft-817-data-1&quot; tabindex=&quot;-1&quot;&gt;FT-817的DATA接口&lt;/h2&gt;
&lt;p&gt;在FT-817手册的第38/41页，有两张图，说明了DATA接口的连线方案。FT8使用的是AFSK调制模式，只用到了DATA接口的1200bps的针脚接口。所以参考38页那个也行。下边这个是41页那张图，说明了DATA接口所有的定义和连接方式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bg6lh.github.io/img/user/assets/diy-ft-817-data-cable.png&quot; alt=&quot;FT-817 DATA接口定义&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MD6接口的定义：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src=&quot;https://bg6lh.github.io/img/user/assets/diy-ft-817-data-cable-1.png&quot; alt=&quot;插座正面&quot; /&gt;&lt;/th&gt;
&lt;th&gt;插座正面图&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://bg6lh.github.io/img/user/assets/diy-ft-817-data-cable-2.png&quot; alt=&quot;插座镜像&quot; /&gt;&lt;/td&gt;
&lt;td&gt;连线的时候要注意，对应的是插座正面的镜像标准画法反面图的针脚应该是黑色的圆点，表示是针&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下边这张对照表，对应了DATA针脚定义、YAESU的CT-39A连接线的线束颜色、我买的MD6的线束颜色、3.5mm立体声接头的接线对照表。我没买CT-39A，我买的那个MD6线的颜色也不是标准的。所以要用万用表一个个测量，对应出每个针脚的位置。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;针脚&lt;/th&gt;
&lt;th&gt;标签&lt;/th&gt;
&lt;th&gt;CT-39A&lt;/th&gt;
&lt;th&gt;我的MD6线的颜色&lt;/th&gt;
&lt;th&gt;声卡接线方式&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;PKD&lt;/td&gt;
&lt;td&gt;褐色&lt;/td&gt;
&lt;td&gt;蓝色&lt;/td&gt;
&lt;td&gt;Line Out / Green&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;GND&lt;/td&gt;
&lt;td&gt;红色&lt;/td&gt;
&lt;td&gt;紫色&lt;/td&gt;
&lt;td&gt;Line I/O GND&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;PTT&lt;/td&gt;
&lt;td&gt;橙色&lt;/td&gt;
&lt;td&gt;黄色&lt;/td&gt;
&lt;td&gt;空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;RX9600&lt;/td&gt;
&lt;td&gt;黄色&lt;/td&gt;
&lt;td&gt;白色&lt;/td&gt;
&lt;td&gt;空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;RX1200&lt;/td&gt;
&lt;td&gt;绿色&lt;/td&gt;
&lt;td&gt;黑色&lt;/td&gt;
&lt;td&gt;Line In / Red&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;PKS(SQL)&lt;/td&gt;
&lt;td&gt;蓝色&lt;/td&gt;
&lt;td&gt;褐色&lt;/td&gt;
&lt;td&gt;空&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;关于声卡的技术参数&quot; tabindex=&quot;-1&quot;&gt;关于声卡的技术参数&lt;/h2&gt;
&lt;p&gt;网上有一些成品化的连接器方案。比如使用了音频隔离变压器、光偶合的ACC控制电路。我这个主要还是因为只在QRP设备上用，没考虑太多。但是咨询了卖家这个USB声卡的参数，得到了一些参考数据。&lt;/p&gt;
&lt;p&gt;这是绿联的US205 USB声卡，用的是HS-100B芯片的USB声卡方案，据卖家讲：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Line-OUT：负载16Ω，功率可达60mW。所以我推算峰值输出电压不高于980mV&lt;/li&gt;
&lt;li&gt;MIC-IN：输入57mV，输出功率是0dBFS，失真小于0.02，当超过57mV时，失真就会开始急剧加大；最大输入可达到125mV，输入功率为2dBFS，失真24%&lt;/li&gt;
&lt;li&gt;MIC-IN：输入57mV，输出功率是0dBFS，失真小于0.02，当超过57mV时，失真就会开始急剧加大；最大输入可达到125mV，输入功率为2dBFS，失真24%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在FT-817的DATA接口的电压指标是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封包数据输入（对应声卡的Line-OUT）：阻抗10 kΩ；最大输入电压40 mVpp 用于 1200 bps；2.0 Vpp 用于 9600 bps&lt;/li&gt;
&lt;li&gt;1200 bps 封包数据输出（对应声卡的MIC-IN）：阻抗10 kΩ，最大输出电压300 mVpp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，在音频方面，个人感觉：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发射时，把USB声卡的音量降低，可以降低输出电压，观察系统的Audio MIDI Setup，降到-29dB左右，可以匹配到817的信号输入电压。具体表现还是要观察ALC电平指示，4-5格就不错了。&lt;/li&gt;
&lt;li&gt;接收时，因为817的DATA接口提供的输出功率是固定的，所以显然大于USB声卡最佳电压两三倍了，按客服说的“信号失真24%”了。不过这对于FT8来说还能接受吧。在接收本地电台的FT8时、还有信噪比很高的信号时，瀑布上总是有附近频率产生的干扰信号，可能就是这个失真带来的问题吧。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我在各种线上都加了磁环，这套线目前性能稳定。我也担心传说中的烧817的话题，买个连接盒子还是更好些。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收时，因为817的DATA接口提供的输出功率是固定的，所以显然大于USB声卡最佳电压两三倍了，按客服说的“信号失真24%”了。不过这对于FT8来说还能接受吧。在接收本地电台的FT8时、还有信噪比很高的信号时，瀑布上总是有附近频率产生的干扰信号，可能就是这个失真带来的问题吧。。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我在各种线上都加了磁环，这套线目前性能稳定。我也担心传说中的烧817的话题，买个连接盒子还是更好些。&lt;/p&gt;
&lt;p&gt;BTW：&lt;strong&gt;观察系统的Audio MIDI Setup，降到-29dB左右&lt;/strong&gt;，这段我也不确定效果如何，因为最终我发现USB声卡音量从大到小，FT-817的ALC电平几乎没变化。而且我FT-817上DIG MIC、SSB MIC、PSK MIC 的设置，都是默认的50，发射起来ALC很稳定，四、五格。这可能跟我加了磁环有关系？&lt;/p&gt;

            </content>
            <link href="https://bg6lh.github.io//DIY-FT-817-DATA-Cable/" />
        </entry>
</feed>
